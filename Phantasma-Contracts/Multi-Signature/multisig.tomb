
contract test {
	import Runtime;
	import List;
	import Call;

	global owners: storage_list<address>;

	constructor(owner:address)
	{
		owners.add(owner);
	}

	private validateSignatures() {
		local index:number = 0;
		local count:number = owners.count();
	
		while (index < count) {
			local addr:address = owners.get(index);
			if (!Runtime.isWitness(addr)) {
				throw "missing signature of "+addr;
			}
		}
	}

	public isOwner(target:address):bool {
		local index:number = 0;
		local count:number = owners.count();

		while (index < count) {
			local addr:address = owners.get(index);
			if (addr == target) {
				return true;
			}
		}

		return false;
	}
	

	public addOwner(target:address) {
	
		Runtime.expect(!this.isOwner(target), "already is owner");
		this.validateSignatures();
		owners.add(target);
	}

	trigger onSend(from:address, to:address, symbol:string,amount:number){
		this.validateSignatures();
	}
	/*
	//onSend takes 4 Parameters according to TombLangCompiler.cs
	trigger onSend(from:address, symbol:string, amount:number)
	{
		this.validateSignatures();
	}
	*/

}


